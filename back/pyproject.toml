[project]
name = "tuto"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "aiomysql>=0.2.0",
    "asyncpg>=0.30.0",
    "bcrypt>=3.2.0,<4.0.0",
    "boto3>=1.40.37",
    "fastapi[standard]>=0.115.12",
    "passlib>=1.7.4",
    "psycopg2-binary>=2.9.10",
    "pyjwt>=2.10.1",
    "python-jose[cryptograpy]>=3.5.0",
    "requests>=2.32.5",
    "ruff>=0.12.9",
    "sqlmodel>=0.0.24",
]

[dependency-groups]
dev = [
    "alembic>=1.15.2",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
preview = true
select = [
    "ANN", # type annotation
    "B",   # flake8-bugbear
    "D",   # pydocstyle
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "PTH", # use `pathlib.Path` instead of `os.path`
    "RUF", # ruff specific rules
    "SIM", # flake8-simplify
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
]
ignore = [
    "ANN401", # Checks that function arguments are annotated with a more specific type than Any.
    "B007",   # Unused loop variable
    "B008",   # Function call in default argument
    "B905",   # `zip()` without `strict=True`
    "COM812", # Missing trailing comma
    "COM819", # Trailing comma prohibited
    "D1",     # Missing docstring in public module, class, function, or method
    "D203",   # One blank line required before class docstring (ignored because D211 is prioritized in pydocstyle convention 'google')
    "D205",   # 1 blank line required between summary line and description
    "D212",   # Multi-line docstring summary should start at the first line
    "D213",   # Multi-line docstring summary should start at the second line
    "D400",   # First line of docstring should end with a period
    "D415",   # First line of docstring should end with punctuation (period, question mark, or exclamation point)
    "E114",   # Indentation is not a multiple of four (comment)
    "G004",   # Logging statement uses f-string
    "ISC001", # Implicit string concatenation on a single line
    "ISC002", # Implicit string concatenation on multiple lines
    "PTH120", # `os.path.join()` should be replaced by `/` operator on `Path` objects
    "PTH123", # `open()` should be replaced by `Path.open()`
    "Q000",   # Single quotes found when double quotes are preferred
    "Q001",   # Single quotes found when double quotes are preferred for multi-line strings
    "Q002",   # Single quotes found when double quotes are preferred for docstrings
    "RUF002", # Checks for ambiguous Unicode characters in docstrings.
    "RUF003", # Checks for ambiguous Unicode characters in comments.
    "SIM105", # try-except-pass blocks that can be replaced with the contextlib.suppress context manager.
    "SIM108", # Use ternary operator instead of `if`-`else`-block
    "SIM116", # Use a dictionary instead of consecutive `if` statements
    "UP038",  # (Deprecated) Use `X | Y` in `isinstance` call instead of `(X, Y)`
]
unfixable = [
    "F401", # unused import
    "F841", # unused variable
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "I001"]

[tool.ruff.lint.pydocstyle]
convention = "google"
